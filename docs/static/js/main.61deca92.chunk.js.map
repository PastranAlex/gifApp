{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","Gifgrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAoCeA,EAhCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAiBzC,OACE,sBAAMC,SAVa,SAAAC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC7CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAlBoB,SAAAP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCTdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEFI,MAAOF,GAFL,cAEfG,EAFe,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAYdM,GAZc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEnC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAOf,EAAMgB,IAAON,IACzB,kCAAKA,EAAL,WC4BSO,EA9BC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFJ,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAVAC,qBAAW,WACTxB,EAAQC,GACLwB,MAAK,SAACX,GACHS,EAAS,CACPf,KAAMM,EACNO,SAAS,SAGhB,CAACpB,IAEGqB,EDd2BI,CAAazB,GAAjCa,EAFgB,EAEtBN,KAAca,EAFQ,EAERA,QAUtB,OACE,qCACE,6BAAMpB,IACJoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAK,SAAAiB,GAAK,OACf,cAAC,EAAD,eAEMA,GADGA,EAAMf,aEGdgB,EAxBM,WAAO,IAAD,EAEWzC,mBAAS,CAAC,gBAFrB,mBAElBQ,EAFkB,KAENT,EAFM,KAOzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BACIS,EAAWe,KAAK,SAAAT,GAChB,OAAO,cAAC,EAAD,CACCA,SAAaA,GACLA,Y,MCd1B4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.61deca92.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    \n    if ( inputValue.trim().length > 2) {\n      setCategories(categories => [ inputValue, ...categories]);\n      setInputValue('');\n    }\n  }\n\n  return ( \n    <form onSubmit= { handleSubmit }>\n      <input\n        type='text'\n        value={ inputValue}\n        onChange={ handleInputChange }\n      />\n    </form>\n   );\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n \nexport default AddCategory;","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=BdkTZjXNn2piOU8a1SOXX8fpIrxvQqyp`;\n  const resp = await fetch( url );\n  const { data }= await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src= { url } alt= { title}/>\n      <p> {title} </p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nconst Gifgrid = ({category}) => {\n\n  const { data: images, loading } = useFetchGifs(category);\n  // const [images, setImages] = useState([])\n  \n  // useEffect( () => {\n  //   getGifs(category)\n  //       .then( imgs => setImages(imgs));\n  //       // .then( setImages);\n  // }, [category]);\n\n\n  return (\n    <>\n      <h3>{ category }</h3>\n      { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n      <div className=\"card-grid\">\n          { \n            images.map( image => (\n              <GifGridItem\n                key = {image.id}\n                {...image} \n              />\n            )) \n          }\n      </div>\n    </>\n  );\n}\n \nexport default Gifgrid;","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n\n  useEffect( () => {\n    getGifs(category)\n      .then((images) => {\n          setState({\n            data: images,\n            loading: false\n          })\n      })\n  }, [category])\n\n  return state; // { data: [], loading: true}\n}\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport Gifgrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['dragon ball'])\n\n  // const handleAdd = () => {\n  //   setCategories([...categories, 'HxH'])\n  // }\n  return ( \n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories = {setCategories}/>\n      <hr/>\n      <ol>\n        { categories.map( category => {\n          return <Gifgrid \n                  category = { category }\n                  key = { category }\n                  />\n        })}\n      </ol>\n    </>\n   );\n}\n \nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}